function swap(ptr, i, j) {
   declare temp;
   temp := [ptr + i];
   [ptr + i] := [ptr + j];
   [ptr + j] := temp
}

function createRandomArray(max, size) {
    declare ptr;
    alloc(ptr, size);
    declare i;
    while(i < size) {
       [ptr + i] := random % (max + 1);
       i := i + 1
    };
    return ptr
}

function printPartition(ptr, lo, hi) {
    while(lo <= hi) {
       print("% ", [ptr + lo]);
       lo := lo + 1
    };
    print("\n")
}

function printArray(ptr, size) {
    printPartition(ptr, 0, size - 1)
}

function rng(min, max) {
    return min + random % (max + 1 - min)
}

function partition(ptr, lo, hi) {
    declare pivot;
    pivot := [ptr + rng(lo, hi)];
    declare i;
    declare j;
    i := lo - 1;
    j := hi + 1;
    while (true) {
        repeat { i := i + 1 } until ([ptr + i] >= pivot);
        repeat { j := j - 1 } until ([ptr + j] <= pivot);
        if(i >= j) { return j };
        swap(ptr, i, j)
    }
}

function quicksort(ptr, lo, hi) {
    if(lo >= hi \/ lo < 0) { return 0 };
    declare pi;
    pi := partition(ptr, lo, hi);
    quicksort(ptr, lo, pi);
    quicksort(ptr, pi + 1, hi)
}

function merge(p1, s1, p2, s2) {
    declare i;
    declare j;
    declare size;
    declare ptr;
    size := s1 + s2;
    alloc(ptr, size);
    i := p1;
    j := p2;
    for(k := ptr; k < ptr + size; k := k + 1) {
        if(([i] < [j] /\ i < p1 + s1) \/ j >= p2 + s2) {
            [k] := [i];
            i := i + 1
        }
        else {
            [k] := [j];
            j := j + 1
        }
    };
    free(p1, s1);
    free(p2, s2);

    return ptr
}

function parquicksort(ptr, size, threads) {
    if(threads = 1) {
        quicksort(ptr, 0, size - 1);
        return ptr
    };
    declare chunkSize;
    declare t1;
    declare t2;
    declare midSize;
    declare ps;

    chunkSize := size / threads;
    t1        := threads / 2;
    t2        := threads % 2 = 0 ? t1 : t1 + 1;
    midSize   := t1 * chunkSize;
    alloc(ps, 2);

    fork {
        [ps]     := parquicksort(ptr, midSize, t1) |
        [ps + 1] := parquicksort(ptr + midSize, size - midSize, t2)
    };
    join;
    ptr := merge([ps], midSize, [ps + 1], size - midSize);
    free(ps, 2);
    return ptr
}

declare max;
print("Input a maximum number in the array: ");
max := read;
declare size;
print("Input the size of the array: ");
size := read;
declare threads;
print("Input the number of threads: ");
threads := read;
declare ptr;
ptr := createRandomArray(max, size);
print("The array is:\n");
printArray(ptr, size);
ptr := parquicksort(ptr, size, threads);
print("\nThe sorted array is: \n");
printArray(ptr, size)